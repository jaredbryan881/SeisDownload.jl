var documenterSearchIndex = {"docs":
[{"location":"#SeisDownload.jl-1","page":"Home","title":"SeisDownload.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Download seismic waveform from data server.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Download from earthquake data center\nPre-processing (tapering, filling time gap, bandpass filter, downsampling) with Noise.jl速\nComputing fft of waveform at the same time\nAll data (metadata, waveform, fft, ...) is saved in the form of SeisData structure with SeisIO.jl速.","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"This package depends on SeisIO.jl速 and Noise.jl速, so please download these modules first.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Then from the Julia command prompt:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Press ] to enter pkg.\nType or copy: add https://github.com/kura-okubo/SeisDownload.jl; build; precompile\nPress backspace to exit pkg.\nType or copy: using SeisDownload","category":"page"},{"location":"#Example-1","page":"Home","title":"Example","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"You can download data using seisdownload:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"seisdownload(network, station, location, channels, datacenter, servername, starttime, endtime, save_time_unit [s], \"outputfilename\")","category":"page"},{"location":"#","page":"Home","title":"Home","text":"more information; see EXAMPLE directory.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"},{"location":"Functions/#SeisDownload.jl-1","page":"Functions","title":"SeisDownload.jl","text":"","category":"section"},{"location":"Functions/#","page":"Functions","title":"Functions","text":"seisdownload","category":"page"},{"location":"Functions/#SeisDownload.seisdownload","page":"Functions","title":"SeisDownload.seisdownload","text":"seisdownload(network::Array{String,1}, station::Array{String,1}, location::Array{String,1}, channel::Array{String,1}, datacenter::String, src::String,\n            Starttime::DateTime, Endtime::DateTime, CC_time_unit::Float64, foname::String;\n            pre_filt::NTuple{4,Float64}=(0.001, 0.002, 10.0, 20.0),\n            downsample_fs::Float64=20,\n            IsRemoveStationXML::Bool=true)\n\nDownload seismic data, preprocessing and saving into JLD2 file.\n\nArguments\n\nnetwork::Array{String,1}    : List of network e.g. network=[\"BP\"]\nstation::Array{String,1}    : List of station e.g. station=[\"LCCB\", \"MMNB\"]\nlocation::Array{String,1}   : List of location e.g. location=[\"\"]\nchannel::Array{String,1}   : List of channel e.g. channel=[\"BP1\", \"BP2\"]\ndatacenter::String          : name of data center e.g. datacenter=\"NCEDC\"\nsrc::String                 : name of source server e.g. src=\"NCEDC\"\nStarttime::DateTime         : Starttime e.g. Starttime = DateTime(2004,6,1,0,0,0) (using module Dates)\nEndtime::DateTime           : Endtime e.g. Endtime = DateTime(2004,6,2,0,0,0) (using module Dates)\nCC_time_unit::Float64       : Unit time for cross-correlation data [sec] e.g. CCtimeunit = 3600\nfoname::String              : output file name.\npre_filt::NTuple{4,Float64} : option for pre-filter before removing instrumental response.\ndownsample_fs               : downsampling frequency.\nIsRemoveStationXML          : Station XML file is removed after removing resp from dataset.\n\nOutput\n\nfoname.jld2                 : contains SeisData structure with a hierarchical structure (Date, CC time unit, metadata)\n\n\n\n\n\n","category":"function"}]
}
